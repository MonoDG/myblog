name: Deploy Feature Branch

on:
  push:
    branches:
      - 'feature/**'
  delete:
    branches:
      - 'feature/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.5

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Extract branch name
      id: extract_branch
      run: |
        echo "branch=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> "$GITHUB_OUTPUT"

    - name: Setup or Update DNS Record on Cloudflare
      if: github.event_name == 'push'
      env:
        CF_API_TOKEN: ${{ secrets.CLOUDFARE_API_TOKEN }}
        CF_ZONE_ID: ${{ secrets.CLOUDFARE_ZONE_ID }}
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
      run: |
        BRANCH_NAME=$BRANCH
        SUBDOMAIN="${BRANCH_NAME}.themono.work"
        IP_ADDRESS="${{ secrets.FEATURE_DROPLET_IP }}"
        echo "BRANCH: $BRANCH"
        echo "SUBDOMAIN: $SUBDOMAIN"
        echo "IP_ADDRESS: $IP_ADDRESS"
        # Check if DNS record already exists
        RECORD_EXISTS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=A&name=${SUBDOMAIN}" \
          -H "Authorization: Bearer ${CF_API_TOKEN}" \
          -H "Content-Type: application/json" | jq -r '.result[0].id')
        echo "RECORD_EXISTS: $RECORD_EXISTS"
        # Create or update DNS record
        if [ -z "$RECORD_EXISTS" ]; then
          # Create new DNS record
          curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"type":"A","name":"'"${SUBDOMAIN}"'","content":"'"${IP_ADDRESS}"'","ttl":120,"proxied":false}'
        else
          # Update existing DNS record
          curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records/${RECORD_EXISTS}" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"type":"A","name":"'"${SUBDOMAIN}"'","content":"'"${IP_ADDRESS}"'","ttl":120,"proxied":false}'
        fi

    - name: Build and Push Docker Image
      env:
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
      run: |
        docker build -t myblog:$BRANCH .
        docker push myblog::$BRANCH

    - name: Deploy to DigitalOcean Droplet
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
      run: |
        echo "${SSH_KEY}" > deploy_key.pem
        chmod 600 deploy_key.pem
        ssh -o StrictHostKeyChecking=no -i deploy_key.pem root@${{ secrets.FEATURE_DROPLET_IP }} "docker pull myblog::${{ steps.extract_branch.outputs.branch }} && docker run -d -p 80:80 myblog:${{ steps.extract_branch.outputs.branch }}"

    - name: Remove DNS Record on Cloudflare
      if: github.event_name == 'delete'
      env:
        CF_API_TOKEN: ${{ secrets.CLOUDFARE_API_TOKEN }}
        CF_ZONE_ID: ${{ secrets.CLOUDFARE_ZONE_ID }}
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
      run: |
        BRANCH_NAME=$BRANCH
        SUBDOMAIN="${BRANCH_NAME}.themono.work"
        # Fetch record id:
        RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=A&name=${SUBDOMAIN}" \
          -H "Authorization: Bearer ${CF_API_TOKEN}" \
          -H "Content-Type: application/json" | jq -r '.result[0].id')
        # Delete DNS record
        if [ -n "$RECORD_ID"]; then
          curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records/${RECORD_ID}" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json"
        fi