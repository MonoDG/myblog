name: Deploy Feature Branch

on:
  push:
    branches:
      - 'feature/**'
  delete:
    branches:
      - 'feature/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.5

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Extract branch name
      id: extract_branch
      run: |
        echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's|feature/||g' | tr -d -)" >> "$GITHUB_OUTPUT"

    - name: Setup or Update DNS Record on Cloudflare
      if: github.event_name == 'push'
      env:
        CF_API_TOKEN: ${{ secrets.CLOUDFARE_API_TOKEN }}
        CF_ZONE_ID: ${{ secrets.CLOUDFARE_ZONE_ID }}
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
      run: |
        BRANCH_NAME=$BRANCH
        SUBDOMAIN="${BRANCH_NAME}.themono.work"
        IP_ADDRESS="${{ secrets.FEATURE_DROPLET_IP }}"
        echo "BRANCH: $BRANCH"
        echo "SUBDOMAIN: $SUBDOMAIN"
        # Check if DNS record already exists
        RECORD_EXISTS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=A&name=${SUBDOMAIN}" \
          -H "Authorization: Bearer ${CF_API_TOKEN}" \
          -H "Content-Type: application/json" | jq -r '.result[0].id // empty')
        echo "RECORD_EXISTS: $RECORD_EXISTS"
        # Create or update DNS record
        if [ -z "$RECORD_EXISTS" ]; then
          # Create new DNS record
          curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"type":"A","name":"'"${SUBDOMAIN}"'","content":"'"${IP_ADDRESS}"'","ttl":120,"proxied":true}'
        else
          # Update existing DNS record
          curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records/${RECORD_EXISTS}" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"type":"A","name":"'"${SUBDOMAIN}"'","content":"'"${IP_ADDRESS}"'","ttl":120,"proxied":true}'
        fi

    - name: Login to Docker Hub
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    - name: Build and Push Docker Image
      env:
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
      run: |
        echo "BRANCH: $BRANCH"
        docker build -t monodg/myblog:$BRANCH .
        docker push monodg/myblog:$BRANCH

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.FEATURE_DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to DigitalOcean
      env:
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
      run: |
        ssh -i ~/.ssh/deploy_key root@${{ secrets.FEATURE_DROPLET_IP }} "docker pull monodg/myblog:$BRANCH && docker run -d -p 80:80 monodg/myblog:$BRANCH"

    - name: Remove DNS Record on Cloudflare
      if: github.event_name == 'delete'
      env:
        CF_API_TOKEN: ${{ secrets.CLOUDFARE_API_TOKEN }}
        CF_ZONE_ID: ${{ secrets.CLOUDFARE_ZONE_ID }}
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
      run: |
        BRANCH_NAME=$BRANCH
        SUBDOMAIN="${BRANCH_NAME}.themono.work"
        # Fetch record id:
        RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=A&name=${SUBDOMAIN}" \
          -H "Authorization: Bearer ${CF_API_TOKEN}" \
          -H "Content-Type: application/json" | jq -r '.result[0].id // empty')
        # Delete DNS record
        if [ -n "$RECORD_ID"]; then
          curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records/${RECORD_ID}" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json"
        fi